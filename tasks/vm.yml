---
# Check if VM exists
- name: "{{ vm.name }} :: VM storage location "
  file:
    state: directory
    path: "{{ vm.data_root_path }}/vms/{{ vm.name }}"

- name: "{{ vm.name }} :: copy-on-write image"
  stat:
    path: "{{ vm.data_root_path}}/vms/{{ vm.name }}/{{ vm.name }}.qcow2"
    get_checksum: false
  register: vm_stat

# Generate kick-off
- name: "{{ vm.name }} :: cloud-config file for Ubuntu"
  template:
    src: templates/ubuntu-cloud-config.yml.j2
    dest: "{{ vm.data_root_path}}/vms/{{ vm.name }}/cloud-config.yml"
  when: "vm_stat.stat.exists == false and 'ubuntu' in vm.linux_distro"

- name: "{{ vm.name }} :: cloud-config file for Debian"
  template:
    src: templates/debian-cloud-config.yml.j2
    dest: "{{ vm.data_root_path}}/vms/{{ vm.name }}/cloud-config.yml"
  when: "vm_stat.stat.exists == false and 'debian' in vm.linux_distro"

- name: "{{ vm.name }} :: network metadata Ubuntu file"
  template:
    src: templates/ubuntu-network-config-v2.yml.j2
    dest: "{{ vm.data_root_path}}/vms/{{ vm.name }}/network-config-v2.yml"
  when: "vm_stat.stat.exists == false and 'ubuntu' in vm.linux_distro"

- name: "{{ vm.name }} :: network metadata Debian file"
  template:
    src: templates/debian-network-config-v2.yml.j2
    dest: "{{ vm.data_root_path}}/vms/{{ vm.name }}/network-config-v2.yml"
  when: "vm_stat.stat.exists == false and 'debian' in vm.linux_distro"


- name: "{{ vm.name }} :: cloud-config image"
  shell:
    creates: "{{ vm.data_root_path}}/vms/{{ vm.name }}/cloud-config.img"
    cmd: cloud-localds --network-config={{ vm.data_root_path }}/vms/{{ vm.name }}/network-config-v2.yml {{ vm.data_root_path }}/vms/{{ vm.name }}/cloud-config.img {{ vm.data_root_path}}/vms/{{ vm.name }}/cloud-config.yml
  when: vm_stat.stat.exists == false


- name: Define full Ubuntu name based
  set_fact:
    full_distro_name: jammy-server-cloudimg-amd64
  when: "'ubuntu' in vm.linux_distro"


- name: Define full Debian name
  set_fact:
    full_distro_name: debian-11-genericcloud-amd64
  when: "'debian' in vm.linux_distro"


# Configure and launch VM
- name: "{{ vm.name }} :: Provision Virtual Machine disk"
  copy:
#    src: "{{ vm.data_root_path}}/images/jammy-server-cloudimg-amd64.qcow2"
    src: "{{ vm.data_root_path}}/images/{{ full_distro_name }}.qcow2"
    dest: "{{ vm.data_root_path}}/vms/{{ vm.name }}/{{ vm.name }}.qcow2"
    remote_src: true
  when: vm_stat.stat.exists == false

- name: "{{ vm.name }} :: Resize Virtual Machine disk"
  shell:
    cmd: qemu-img resize {{ vm.data_root_path}}/vms/{{ vm.name }}/{{ vm.name }}.qcow2 {{ vm.disk|default('5G') }}
  when: vm_stat.stat.exists == false

- name: "{{ vm.name }} :: Create virtual machine "
  shell:
    cmd: >-
        virt-install
        --noautoconsole
        --name {{ vm.name }}
        --memory {{ vm.mem|default('512') }}
        --vcpus  {{ vm.cpu|default('1') }}
        --disk {{ vm.data_root_path}}/vms/{{ vm.name }}/{{ vm.name }}.qcow2,device=disk,bus=virtio
        --disk {{ vm.data_root_path}}/vms/{{ vm.name }}/cloud-config.img,device=cdrom
        --os-type linux
        --os-variant ubuntu20.10
        --virt-type kvm
        --graphics none
        --network bridge={{ vm.bridge|default('default') }},model=virtio
        --import
  when: vm_stat.stat.exists == false

# Set VM Autostartup
- name: "{{ vm.name }} start with host startup"
  virt:
    name: "{{ vm.name }}"
    autostart: true

